// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.crm.domain;

import com.malsolo.crm.domain.CartOrder;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CartOrder_Roo_Entity {
    
    declare @type: CartOrder: @Entity;
    
    declare @type: CartOrder: @Table(name = "CART_ORDER", schema = "public");
    
    @PersistenceContext
    transient EntityManager CartOrder.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "CART_ORDER_ID")
    private Long CartOrder.cartOrderId;
    
    public Long CartOrder.getCartOrderId() {
        return this.cartOrderId;
    }
    
    public void CartOrder.setCartOrderId(Long id) {
        this.cartOrderId = id;
    }
    
    @Transactional
    public void CartOrder.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void CartOrder.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CartOrder attached = CartOrder.findCartOrder(this.cartOrderId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CartOrder.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void CartOrder.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public CartOrder CartOrder.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CartOrder merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager CartOrder.entityManager() {
        EntityManager em = new CartOrder().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CartOrder.countCartOrders() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CartOrder o", Long.class).getSingleResult();
    }
    
    public static List<CartOrder> CartOrder.findAllCartOrders() {
        return entityManager().createQuery("SELECT o FROM CartOrder o", CartOrder.class).getResultList();
    }
    
    public static CartOrder CartOrder.findCartOrder(Long cartOrderId) {
        if (cartOrderId == null) return null;
        return entityManager().find(CartOrder.class, cartOrderId);
    }
    
    public static List<CartOrder> CartOrder.findCartOrderEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CartOrder o", CartOrder.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
