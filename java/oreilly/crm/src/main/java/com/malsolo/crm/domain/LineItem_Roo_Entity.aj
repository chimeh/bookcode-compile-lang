// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.crm.domain;

import com.malsolo.crm.domain.LineItem;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LineItem_Roo_Entity {
    
    declare @type: LineItem: @Entity;
    
    declare @type: LineItem: @Table(name = "LINE_ITEM", schema = "public");
    
    @PersistenceContext
    transient EntityManager LineItem.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "LINE_ITEM_ID")
    private Long LineItem.lineItemId;
    
    public Long LineItem.getLineItemId() {
        return this.lineItemId;
    }
    
    public void LineItem.setLineItemId(Long id) {
        this.lineItemId = id;
    }
    
    @Transactional
    public void LineItem.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void LineItem.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            LineItem attached = LineItem.findLineItem(this.lineItemId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void LineItem.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void LineItem.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public LineItem LineItem.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        LineItem merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager LineItem.entityManager() {
        EntityManager em = new LineItem().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long LineItem.countLineItems() {
        return entityManager().createQuery("SELECT COUNT(o) FROM LineItem o", Long.class).getSingleResult();
    }
    
    public static List<LineItem> LineItem.findAllLineItems() {
        return entityManager().createQuery("SELECT o FROM LineItem o", LineItem.class).getResultList();
    }
    
    public static LineItem LineItem.findLineItem(Long lineItemId) {
        if (lineItemId == null) return null;
        return entityManager().find(LineItem.class, lineItemId);
    }
    
    public static List<LineItem> LineItem.findLineItemEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM LineItem o", LineItem.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
